package no.nav.hjelpemidler.soknad.mottak.util

import com.fasterxml.jackson.databind.JsonNode
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import no.nav.hjelpemidler.soknad.mottak.Configuration
import no.nav.hjelpemidler.soknad.mottak.Profile
import no.nav.hjelpemidler.soknad.mottak.asObject
import no.nav.hjelpemidler.soknad.mottak.client.HjelpemiddeldatabaseClient
import no.nav.hjelpemidler.soknad.mottak.service.BehovsmeldingType

object AutoGenerateDocumentTitle {
    fun generateTitle(behovsmelding: JsonNode): String {
        val behovsmeldingType: BehovsmeldingType =
            behovsmelding["behovsmeldingType"]?.asObject() ?: BehovsmeldingType.SØKNAD

        if (Configuration.application.profile == Profile.LOCAL) {
            return defaultTitle(behovsmeldingType)
        }

        val hmsnrs = when (behovsmeldingType) {
            BehovsmeldingType.BRUKERPASSBYTTE -> setOf(behovsmelding["brukerpassbytte"]["hjelpemiddel"]["artnr"].textValue())
            else -> behovsmelding["soknad"]["hjelpemidler"]["hjelpemiddelListe"]
                .mapNotNull { it["hmsNr"].asText() }
                .filter { it.isNotEmpty() }.toSet()
        }

        return generateTitle(hmsnrs, behovsmeldingType)
    }

    private fun generateTitle(hmsnrs: Set<String>, behovsmeldingType: BehovsmeldingType): String {
        val isokategorier = runCatching {
            runBlocking(Dispatchers.IO) {
                HjelpemiddeldatabaseClient.hentProdukter(hmsnrs)
            }
        }.getOrElse {
            // Let us default to defaultTitle(..) rather than throw if grunndata-search is down
            return defaultTitle(behovsmeldingType)
        }

        val title = isokategorier
            .asSequence()
            .mapNotNull { it.isoCategoryTitleShort }
            .filter { it.isNotEmpty() }
            .toSet()
            .sorted()
            .joinToString(separator = ", ")
            .lowercase()

        if (title.isEmpty()) {
            return defaultTitle(behovsmeldingType)
        }

        SlackClient.post(title)

        return when (behovsmeldingType) {
            BehovsmeldingType.BESTILLING -> "Bestilling av: $title"
            BehovsmeldingType.SØKNAD -> "Søknad om: $title"
            BehovsmeldingType.BYTTE, BehovsmeldingType.BRUKERPASSBYTTE -> "Bytte av: $title"
        }
    }

    private fun defaultTitle(behovsmeldingType: BehovsmeldingType) =
        when (behovsmeldingType) {
            BehovsmeldingType.BESTILLING -> "Bestilling av hjelpemidler"
            BehovsmeldingType.SØKNAD -> "Søknad om hjelpemidler"
            BehovsmeldingType.BYTTE, BehovsmeldingType.BRUKERPASSBYTTE -> "Bytte av hjelpemidler"
        }
}
