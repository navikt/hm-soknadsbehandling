package no.nav.hjelpemidler.soknad.mottak.util

import com.fasterxml.jackson.databind.JsonNode
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import mu.KotlinLogging
import no.nav.hjelpemidler.soknad.mottak.Configuration
import no.nav.hjelpemidler.soknad.mottak.Profile
import no.nav.hjelpemidler.soknad.mottak.asObject
import no.nav.hjelpemidler.soknad.mottak.client.`hmdb-ng`.HjelpemiddeldatabaseNgClient
import no.nav.hjelpemidler.soknad.mottak.client.hmdb.HjelpemiddeldatabaseClient
import no.nav.hjelpemidler.soknad.mottak.service.BehovsmeldingType
import no.nav.hjelpemidler.soknad.mottak.util.slack.PostToSlack

private val log = KotlinLogging.logger {}

object AutoGenerateDocumentTitle {

    fun generateTitle(behovsmelding: JsonNode): String {
        val behovsmeldingType: BehovsmeldingType =
            behovsmelding["behovsmeldingType"]?.asObject() ?: BehovsmeldingType.SØKNAD

        if (Configuration.application.profile == Profile.LOCAL) {
            return defaultTitle(behovsmeldingType)
        }

        val hmsnrs = when (behovsmeldingType) {
            BehovsmeldingType.BRUKERPASSBYTTE -> setOf(behovsmelding["brukerpassbytte"]["hjelpemiddel"]["artnr"].textValue())
            else -> behovsmelding["soknad"]["hjelpemidler"]["hjelpemiddelListe"]
                .mapNotNull { it["hmsNr"].asText() }
                .filter { it.isNotEmpty() }.toSet()
        }

        return generateTitle(hmsnrs, behovsmeldingType)
    }

    private fun generateTitle(hmsnrs: Set<String>, behovsmeldingType: BehovsmeldingType): String {
        val isokategorier = runBlocking(Dispatchers.IO) {
            HjelpemiddeldatabaseClient.hentProdukter(hmsnrs)
        }


        // TODO: Remove when old grunndata-api is replaced in prod., and old hmdb is hmdb-ng
        val isokategorierMap = isokategorier
            .filter { it.hmsnr != null && it.isokortnavn != null }
            .groupBy { it.hmsnr }
            .mapValues { it.value.first() }

        val isokategorierNgMap = runBlocking(Dispatchers.IO) {
            runCatching { HjelpemiddeldatabaseNgClient.hentProdukter(hmsnrs) }.getOrElse { e ->
                log.error(e) { "DEBUG GRUNNDATA: Exception while fetching hmdb-ng: $e" }
                listOf()
            }
        }
            .filter { it.hmsArtNr != null && it.isoCategoryTitleShort != null }
            .groupBy { it.hmsArtNr }
            .mapValues { it.value.first() }

        val missingHmsnrs: MutableList<String> = mutableListOf()
        val unexpectedIsoHmsnrs: MutableMap<String, Pair<String, String>> = mutableMapOf()
        val matchesHmsnrs: MutableMap<String, String> = mutableMapOf()
        isokategorierMap.forEach { (hmsnr, old) ->
            val new = isokategorierNgMap[hmsnr!!]
            if (new == null) {
                missingHmsnrs.add(hmsnr)
            } else if (old.isokortnavn != new.isoCategoryTitleShort) {
                unexpectedIsoHmsnrs[hmsnr] = Pair(old.isokortnavn.toString(), new.isoCategoryTitleShort.toString())
            } else {
                matchesHmsnrs[hmsnr] = old.isokortnavn.toString()
            }
        }
        if (missingHmsnrs.isNotEmpty()) {
            log.info("DEBUG GRUNNDATA: new dataset missing results for hmsnrs=$missingHmsnrs")
        }
        if (unexpectedIsoHmsnrs.isNotEmpty()) {
            log.info("DEBUG GRUNNDATA: new dataset has mismatching isoCategoryTitleShorts: $unexpectedIsoHmsnrs")
        }
        if (matchesHmsnrs.isNotEmpty()) {
            log.info("DEBUG GRUNNDATA: new dataset matches old for hmsnrs/isoCategoryTitleShorts: $matchesHmsnrs")
        }


        val title = isokategorier
            .mapNotNull { it.isokortnavn }
            .filter { it.isNotEmpty() }
            .toSet()
            .sorted()
            .joinToString(separator = ", ")
            .lowercase()

        if (title.isEmpty()) {
            return defaultTitle(behovsmeldingType)
        }
        PostToSlack().post(title)
        return when (behovsmeldingType) {
            BehovsmeldingType.BESTILLING -> "Bestilling av: $title"
            BehovsmeldingType.SØKNAD -> "Søknad om: $title"
            BehovsmeldingType.BYTTE, BehovsmeldingType.BRUKERPASSBYTTE -> "Bytte av: $title"
        }
    }

    private fun defaultTitle(behovsmeldingtype: BehovsmeldingType) =
        when (behovsmeldingtype) {
            BehovsmeldingType.BESTILLING -> "Bestilling av hjelpemidler"
            BehovsmeldingType.SØKNAD -> "Søknad om hjelpemidler"
            BehovsmeldingType.BYTTE, BehovsmeldingType.BRUKERPASSBYTTE -> "Bytte av hjelpemidler"
        }
}




