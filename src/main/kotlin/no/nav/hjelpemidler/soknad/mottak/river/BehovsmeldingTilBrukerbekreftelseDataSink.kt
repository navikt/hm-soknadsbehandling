package no.nav.hjelpemidler.soknad.mottak.river

import com.fasterxml.jackson.module.kotlin.convertValue
import com.github.navikt.tbd_libs.rapids_and_rivers.JsonMessage
import com.github.navikt.tbd_libs.rapids_and_rivers.River
import com.github.navikt.tbd_libs.rapids_and_rivers_api.MessageContext
import com.github.navikt.tbd_libs.rapids_and_rivers_api.RapidsConnection
import io.github.oshai.kotlinlogging.KotlinLogging
import no.nav.hjelpemidler.behovsmeldingsmodell.BehovsmeldingStatus
import no.nav.hjelpemidler.behovsmeldingsmodell.Behovsmeldingsgrunnlag
import no.nav.hjelpemidler.soknad.mottak.jsonMapper
import no.nav.hjelpemidler.soknad.mottak.logging.sikkerlogg
import no.nav.hjelpemidler.soknad.mottak.melding.BehovsmeldingTilGodkjenningMelding
import no.nav.hjelpemidler.soknad.mottak.metrics.Metrics
import no.nav.hjelpemidler.soknad.mottak.metrics.Prometheus
import no.nav.hjelpemidler.soknad.mottak.soknadsbehandling.SøknadsbehandlingService
import java.util.UUID

private val logger = KotlinLogging.logger {}

/**
 * Plukker opp behovsmeldinger som må bekreftes av bruker (i hm-dinehjelpemidler på Mitt NAV) før de kan sendes videre i flyten.
 */
class BehovsmeldingTilBrukerbekreftelseDataSink(
    rapidsConnection: RapidsConnection,
    private val søknadsbehandlingService: SøknadsbehandlingService,
    private val metrics: Metrics,
) : AsyncPacketListener {
    init {
        River(rapidsConnection).apply {
            validate { it.demandValue("eventName", "nySoknad") }
            validate { it.demandValue("signatur", "BRUKER_BEKREFTER") }
            validate { it.requireKey("fodselNrBruker", "fodselNrInnsender", "soknad", "eventId") }
            validate { it.forbid("soknadId") }
        }.register(this)
    }

    private val JsonMessage.eventId get() = uuidValue("eventId")
    private val JsonMessage.søknadId get() = this["soknad"]["soknad"]["id"].uuidValue()
    private val JsonMessage.søknad get() = this["soknad"]
    private val JsonMessage.fnrInnsender get() = this["fodselNrInnsender"].textValue()
    private val JsonMessage.fnrBruker get() = this["fodselNrBruker"].textValue()
    private val JsonMessage.navnBruker get() = this["soknad"]["soknad"]["bruker"]["fornavn"].textValue() + " " + this["soknad"]["soknad"]["bruker"]["etternavn"].textValue()

    override suspend fun onPacketAsync(packet: JsonMessage, context: MessageContext) {
        if (packet.eventId in skipList) {
            logger.info { "Hopper over event i skipList: ${packet.eventId}" }
            return
        }

        val søknadId = packet.søknadId
        val fnrBruker = packet.fnrBruker

        try {
            val søknad = søknadsbehandlingService.finnSøknad(søknadId)
            if (søknad != null) {
                logger.warn { "Søknaden er allerede lagret i databasen: $søknadId" }
                return
            }

            val grunnlag = Behovsmeldingsgrunnlag.Digital(
                søknadId = søknadId,
                status = BehovsmeldingStatus.VENTER_GODKJENNING,
                fnrBruker = fnrBruker,
                // Lagres til hm-soknadsbehandling-db, slik at det kan vises i hm-formidler, selv om bruker sletter søknaden (brukerbekreftelse)
                navnBruker = packet.navnBruker,
                fnrInnsender = packet.fnrInnsender,
                behovsmelding = jsonMapper.convertValue(packet.søknad),
                behovsmeldingGjelder = AutoGenerateDocumentTitle.generateTitle(packet.søknad),
            )

            logger.info { "Behovsmelding til godkjenning mottatt, søknadId: $søknadId (gjelder: '${grunnlag.behovsmeldingGjelder}')" }

            søknadsbehandlingService.lagreBehovsmelding(grunnlag)

            context.publish(fnrBruker, BehovsmeldingTilGodkjenningMelding(grunnlag))
            Prometheus.søknadTilGodkjenningCounter.increment()
            logger.info { "Behovsmelding klar til godkjenning, søknadId: $søknadId" }
            sikkerlogg.info { "Behovsmelding klar til godkjenning, søknadId: $søknadId, fnrBruker: $fnrBruker" }
            metrics.digitalSøknad(fnrBruker, søknadId)
        } catch (e: Exception) {
            logger.error(e) { "Håndtering av eventId: ${packet.eventId}, søknadId: $søknadId feilet" }
            throw e
        }
    }

    private val skipList = listOf<UUID>()
}
