package no.nav.hjelpemidler.soknad.mottak.river

import io.github.oshai.kotlinlogging.KotlinLogging
import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.RapidsConnection
import no.nav.helse.rapids_rivers.River
import no.nav.hjelpemidler.behovsmeldingsmodell.BehovsmeldingStatus
import no.nav.hjelpemidler.soknad.mottak.logging.sikkerlogg
import no.nav.hjelpemidler.soknad.mottak.metrics.Metrics
import no.nav.hjelpemidler.soknad.mottak.metrics.Prometheus
import no.nav.hjelpemidler.soknad.mottak.service.SøknadData
import no.nav.hjelpemidler.soknad.mottak.soknadsbehandling.SøknadsbehandlingService
import java.util.UUID

private val logger = KotlinLogging.logger {}

/**
 * Plukker opp behovsmeldinger som må bekreftes av bruker (i hm-dinehjelpemidler på Mitt NAV) før de kan sendes videre i flyten.
 */
class BehovsmeldingTilBrukerbekreftelseDataSink(
    rapidsConnection: RapidsConnection,
    private val søknadsbehandlingService: SøknadsbehandlingService,
    private val metrics: Metrics,
) : AsyncPacketListener {
    init {
        River(rapidsConnection).apply {
            validate { it.demandValue("eventName", "nySoknad") }
            validate { it.demandValue("signatur", "BRUKER_BEKREFTER") }
            validate { it.requireKey("fodselNrBruker", "fodselNrInnsender", "soknad", "eventId", "kommunenavn") }
            validate { it.forbid("soknadId") }
        }.register(this)
    }

    private val JsonMessage.eventId get() = uuidValue("eventId")
    private val JsonMessage.søknadId get() = this["soknad"]["soknad"]["id"].uuidValue()
    private val JsonMessage.søknad get() = this["soknad"]
    private val JsonMessage.fnrInnsender get() = this["fodselNrInnsender"].textValue()
    private val JsonMessage.fnrBruker get() = this["fodselNrBruker"].textValue()
    private val JsonMessage.navnBruker get() = this["soknad"]["soknad"]["bruker"]["fornavn"].textValue() + " " + this["soknad"]["soknad"]["bruker"]["etternavn"].textValue()
    private val JsonMessage.kommunenavn get() = this["kommunenavn"].textValue()

    override suspend fun onPacketAsync(packet: JsonMessage, context: MessageContext) {
        if (packet.eventId in skipList) {
            logger.info { "Hopper over event i skipList: ${packet.eventId}" }
            return
        }
        try {
            val søknadId = packet.søknadId
            val søknadData = SøknadData(
                fnrBruker = packet.fnrBruker,
                navnBruker = packet.navnBruker,
                fnrInnsender = packet.fnrInnsender,
                soknad = packet.søknad,
                soknadId = søknadId,
                status = BehovsmeldingStatus.VENTER_GODKJENNING,
                kommunenavn = packet.kommunenavn,
                soknadGjelder = AutoGenerateDocumentTitle.generateTitle(packet.søknad),
            )

            val søknad = søknadsbehandlingService.finnSøknad(søknadData.søknadId)
            if (søknad != null) {
                logger.warn { "Søknaden er allerede lagret i databasen: $søknadId" }
                return
            }

            logger.info { "Søknad til godkjenning mottatt: $søknadId (søknadGjelder: ${søknadData.soknadGjelder})" }

            søknadsbehandlingService.lagreBehovsmelding(søknadData)

            forward(søknadData, context)

            metrics.digitalSøknad(packet.fnrBruker, søknadId)
        } catch (e: Exception) {
            throw RuntimeException("Håndtering av event: ${packet.eventId} feilet", e)
        }
    }

    private fun forward(søknadData: SøknadData, context: MessageContext) {
        try {
            context.publish(søknadData.fnrBruker, søknadData.toVenterPåGodkjenningJson())
            Prometheus.søknadTilGodkjenningCounter.inc()
            logger.info { "Søknad klar til godkjenning, søknadId: ${søknadData.soknadId}" }
            sikkerlogg.info { "Søknad klar til godkjenning med søknadId: ${søknadData.soknadId}, fnr: ${søknadData.fnrBruker})" }
        } catch (e: Exception) {
            logger.error(e) { "forward() feilet, søknadId: ${søknadData.soknadId}" }
            throw e
        }
    }

    private val skipList = listOf<UUID>()
}
