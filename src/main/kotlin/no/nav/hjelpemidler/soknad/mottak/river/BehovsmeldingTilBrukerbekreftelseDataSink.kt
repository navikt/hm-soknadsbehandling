package no.nav.hjelpemidler.soknad.mottak.river

import com.fasterxml.jackson.databind.JsonNode
import kotlinx.coroutines.runBlocking
import mu.KotlinLogging
import no.nav.helse.rapids_rivers.JsonMessage
import no.nav.helse.rapids_rivers.MessageContext
import no.nav.helse.rapids_rivers.MessageProblems
import no.nav.helse.rapids_rivers.RapidsConnection
import no.nav.helse.rapids_rivers.River
import no.nav.hjelpemidler.soknad.mottak.JacksonMapper
import no.nav.hjelpemidler.soknad.mottak.client.SøknadForRiverClient
import no.nav.hjelpemidler.soknad.mottak.metrics.Metrics
import no.nav.hjelpemidler.soknad.mottak.metrics.Prometheus
import no.nav.hjelpemidler.soknad.mottak.service.SoknadData
import no.nav.hjelpemidler.soknad.mottak.service.Status
import no.nav.hjelpemidler.soknad.mottak.util.AutoGenerateDocumentTitle
import java.util.UUID

private val logger = KotlinLogging.logger {}
private val sikkerlogg = KotlinLogging.logger("tjenestekall")

/**
 * Plukker opp behovsmeldinger som må bekreftes av bruker (i hm-dinehjelpemidler på Mitt NAV) før de kan sendes videre i flyten.
 */
internal class BehovsmeldingTilBrukerbekreftelseDataSink(
    rapidsConnection: RapidsConnection,
    private val søknadForRiverClient: SøknadForRiverClient,
    private val metrics: Metrics
) : PacketListenerWithOnError {

    private fun soknadToJson(soknad: JsonNode): String = JacksonMapper.objectMapper.writeValueAsString(soknad)

    init {
        River(rapidsConnection).apply {
            validate { it.demandValue("eventName", "nySoknad") }
            validate { it.demandValue("signatur", "BRUKER_BEKREFTER") }
            validate { it.requireKey("fodselNrBruker", "fodselNrInnsender", "soknad", "eventId", "kommunenavn") }
            validate { it.forbid("soknadId") }
        }.register(this)
    }

    private val JsonMessage.eventId get() = this["eventId"].textValue()
    private val JsonMessage.fnrBruker get() = this["fodselNrBruker"].textValue()
    private val JsonMessage.fnrInnsender get() = this["fodselNrInnsender"].textValue()
    private val JsonMessage.soknadId get() = this["soknad"]["soknad"]["id"].textValue()
    private val JsonMessage.soknad get() = this["soknad"]
    private val JsonMessage.kommunenavn get() = this["kommunenavn"].textValue()
    private val JsonMessage.navnBruker get() = this["soknad"]["soknad"]["bruker"]["fornavn"].textValue() + " " + this["soknad"]["soknad"]["bruker"]["etternavn"].textValue()

    override fun onError(problems: MessageProblems, context: MessageContext) {
        super.onError(problems, context)
        println(problems.toExtendedReport())
    }

    override fun onPacket(packet: JsonMessage, context: MessageContext) {
        runBlocking {

            if (skipEvent(UUID.fromString(packet.eventId))) {
                logger.info { "Hopper over event i skip-list: ${packet.eventId}" }
                return@runBlocking
            }
            try {
                val soknadData = SoknadData(
                    fnrBruker = packet.fnrBruker,
                    navnBruker = packet.navnBruker,
                    fnrInnsender = packet.fnrInnsender,
                    soknad = packet.soknad,
                    soknadId = UUID.fromString(packet.soknadId),
                    status = Status.VENTER_GODKJENNING,
                    kommunenavn = packet.kommunenavn,
                    soknadGjelder = AutoGenerateDocumentTitle.generateTitle(packet.soknad),
                )

                if (søknadForRiverClient.soknadFinnes(soknadData.soknadId)) {
                    logger.warn { "Søknaden er allerede lagret i databasen: ${packet.soknadId}" }
                    return@runBlocking
                }

                logger.info { "Søknad til godkjenning mottatt: ${packet.soknadId} (soknadGjelder: ${soknadData.soknadGjelder})" }
                save(soknadData)

                forward(soknadData, context)

                metrics.digitalSoknad(packet.fnrBruker, packet.soknadId)
            } catch (e: Exception) {
                throw RuntimeException("Håndtering av event ${packet.eventId} feilet", e)
            }
        }
    }

    private fun skipEvent(eventId: UUID): Boolean {
        val skipList = mutableListOf<UUID>()
        return skipList.any { it == eventId }
    }

    private suspend fun save(soknadData: SoknadData) =
        kotlin.runCatching {
            søknadForRiverClient.save(soknadData)
        }.onSuccess {
            logger.info("Søknad klar til godkjenning saved: ${soknadData.soknadId}")
        }.onFailure {
            logger.error(it) { "Failed to save søknad klar til godkjenning: ${soknadData.soknadId}" }
        }.getOrThrow()

    private fun forward(søknadData: SoknadData, context: MessageContext) {
        try {
            context.publish(søknadData.fnrBruker, søknadData.toVenterPaaGodkjenningJson())
            Prometheus.soknadTilGodkjenningCounter.inc()
            logger.info { "Søknad klar til godkjenning: ${søknadData.soknadId}" }
            sikkerlogg.info { "Søknad klar til godkjenning med søknadsId: ${søknadData.soknadId}, fnr: ${søknadData.fnrBruker})" }
        } catch (e: Exception) {
            logger.error(e) { "Failed: ${e.message}. Soknad: ${søknadData.soknadId}" }
        }
    }
}
